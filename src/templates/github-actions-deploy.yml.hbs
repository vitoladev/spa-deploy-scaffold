# GitHub Actions CI/CD Pipeline
# For setup instructions and configuration details, see: DEPLOYMENT.md

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

permissions:
  contents: read
  id-token: write # Required for AWS OIDC authentication (recommended over static credentials)

env:
  NODE_VERSION: '{{nodeVersion}}'
  AWS_REGION: {{awsRegion}}
  {{#if buildCommand}}
  BUILD_COMMAND: {{buildCommand}}
  {{/if}}

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: $\{{ env.NODE_VERSION }}
          cache: '{{packageManager}}'

      {{#if isPnpm}}
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      {{/if}}
      - name: Install dependencies
        run: {{installCommand}}

      {{#if hasTests}}
      - name: Run linter
        run: {{lintCommand}}
        continue-on-error: false

      - name: Run tests
        run: {{testCommand}}
        continue-on-error: false

      {{/if}}
      - name: Build application
        run: {{buildCommand}}
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: {{outputDir}}
          retention-days: 1
          if-no-files-found: error

  cd:
    name: Continuous Deployment
    needs: ci
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: {{outputDir}}

      - name: Configure AWS credentials (OIDC - Recommended)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: $\{{ secrets.AWS_ROLE_ARN }}
          aws-region: $\{{ env.AWS_REGION }}
          # Alternative: Use static credentials (less secure)
          # aws-access-key-id: $\{{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: $\{{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Sync files to S3
        run: |
          aws s3 sync {{outputDir}} s3://$\{{ secrets.S3_BUCKET_NAME }} \
            --delete \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude "index.html" \
            --exclude "*.html"
          
          # Upload HTML files with different cache settings
          aws s3 sync {{outputDir}} s3://$\{{ secrets.S3_BUCKET_NAME }} \
            --cache-control "public,max-age=0,must-revalidate" \
            --exclude "*" \
            --include "*.html"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $\{{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Deployment summary
        run: |
          echo "### Deployment Successful! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: \`$\{{ secrets.S3_BUCKET_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **CloudFront Distribution**: \`$\{{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: \`$\{{ env.AWS_REGION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`$\{{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          {{#if cloudfrontUrl}}
          echo "- **URL**: https://{{cloudfrontUrl}}" >> $GITHUB_STEP_SUMMARY
          {{/if}}

